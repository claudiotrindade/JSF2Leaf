<!--
A JSF2 Leaflet wrapper component for OpenStreetMap
Copyright (C) 2015 Leonardo Ciocari

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details. 
-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:composite="http://java.sun.com/jsf/composite">

<composite:interface componentType="mapAdvanced">
    <composite:attribute name="map" type="java.lang.Object" />
</composite:interface>

<composite:implementation>

    <head>
    		<link rel="stylesheet" href="#{resource['css:leaflet.css']}" />
        <script src="#{resource['js:leaflet.js']}"></script>
        
        <link rel="stylesheet" href="#{resource['css:markercluster.css']}" />
        <script src="#{resource['js:markercluster.js']}"></script>
                
        <link rel="stylesheet" href="#{resource['css:Control.MiniMap.min.css']}" />
        <script src="#{resource['js:Control.MiniMap.min.js']}"></script>
                
        <link rel="stylesheet" href="#{resource['css:L.Icon.Pulse.css']}" />
        <script src="#{resource['js:L.Icon.Pulse.js']}"></script>
        
        <link rel="stylesheet" href="#{resource['css:leaflet.draw-0.4.2.css']}" />
        <script src="#{resource['js:leaflet.draw-0.4.2.js']}"></script>
        
        <link rel="stylesheet" href="#{resource['css:legend.css']}" />

        
    </head>

    <style type="text/css">
        .leaflet-control-layers-toggle {
            background-image: url('#{resource['images:layers.png']}') !important;
        }
        .leaflet-draw-toolbar a{
        		background-image:url('#{resource['images:spritesheet.png']}') !important;
        		background-image:linear-gradient(transparent,transparent),url('#{resource['images:spritesheet.svg']}') !important
        	}
        .leaflet-retina .leaflet-draw-toolbar a{
        		background-image:url('#{resource['images:spritesheet-2x.png']}') !important;
        		background-image:linear-gradient(transparent,transparent),url('#{resource['images:spritesheet.svg']}') !important
        	}
    </style>

    <div id="#{cc.attrs.id}" style="width:#{cc.mapObject.width}; height:#{cc.mapObject.height}"/>

    <script type="text/javascript">
    
        var #{cc.attrs.id} = L.map('#{cc.attrs.id}', {center: [#{cc.mapObject.center.latitude},#{cc.mapObject.center.longitude}], dragging: #{cc.mapObject.draggingEnabled}, zoomControl: #{cc.mapObject.zoomControl} , zoom: #{cc.mapObject.zoom}});
        var #{cc.attrs.id}_layers = [];
        var #{cc.attrs.id}_layers_map = new Object();

        L.tileLayer('#{cc.mapObject.urlTemplate}', {id: '#{cc.mapObject.id}', attribution: '#{cc.mapObject.attribution}', maxZoom: #{cc.mapObject.maxZoom}, minZoom: #{cc.mapObject.minZoom}}).addTo(#{cc.attrs.id});

        var layers = L.control.layers(null, null, {position: '#{cc.mapObject.layerControlPosition.value}'});

        if(!#{cc.mapObject.zoomEnabled}) {
            #{cc.attrs.id}.touchZoom.disable();
            #{cc.attrs.id}.doubleClickZoom.disable();
            #{cc.attrs.id}.scrollWheelZoom.disable();
            #{cc.attrs.id}.boxZoom.disable();
            #{cc.attrs.id}.keyboard.disable();
        }

        if(#{cc.mapObject.miniMapEnabled}) {
            new L.Control.MiniMap(L.tileLayer('#{cc.mapObject.urlTemplate}', {}), {
                toggleDisplay: '#{cc.mapObject.miniMap.toggleDisplay}',
                zoomAnimation: '#{cc.mapObject.miniMap.zoomAnimation}',
                position: '#{cc.mapObject.miniMap.position.value}',
                width: '#{cc.mapObject.miniMap.width}',
                height: '#{cc.mapObject.miniMap.height}'
            }).addTo(#{cc.attrs.id});
        }
        
        if(#{cc.mapObject.legend != null}) {
			var legend = new L.Control({position: '#{cc.mapObject.legend.position.value}'});

			legend.onAdd = function (map) {

			    var div = L.DomUtil.create('div', 'info legend');

			    <ui:repeat value="#{cc.mapObject.legend.grades}" var="grade">
				    div.innerHTML += '<i style="background:' + '#{grade.color}' + '"></i>' + '#{!grade.label.isEmpty() ? grade.label : grade.value}' + '<br/>';
			    </ui:repeat>

			    return div;
			};

			legend.addTo(#{cc.attrs.id});
		}
        
        //Layers
        <ui:repeat value="#{cc.mapObject.layers}" var="layer">

            <ui:param name="layer_unique_name" value="#{layer.hasId() ? layer.id : 'layer'}" />

            var #{layer_unique_name} = #{layer.clusterEnabled}?new L.MarkerClusterGroup({ disableClusteringAtZoom: #{layer.clusterDisableAtZoom}, maxClusterRadius: #{layer.clusterMaxRadius}}):new L.FeatureGroup();
        
            if(#{cc.mapObject.layerControl}) {
                layers.addOverlay(#{layer_unique_name}, "#{layer.label}");
            }
            
            //Markers
            <ui:repeat value="#{layer.markers}" var="marker">
                <ui:param name="path" value="/images/markers/#{marker.fileName}" />

                if(!#{marker.pulse.pulsing}) {
                    var icon = new L.Icon({iconSize: [25, 41], iconAnchor: [12, 41], popupAnchor: [0, -45], iconUrl: '#{resource[path]}', shadowUrl: '#{resource['images:marker-shadow.png']}'});
                } else {
                    var icon = L.icon.pulse({iconSize:[#{marker.pulse.size},#{marker.pulse.size}],color:'#{marker.pulse.color}'});
                }
                var marker = L.marker([#{marker.position.latitude}, #{marker.position.longitude}],{icon: icon});
                                        
                if(#{!marker.popupMsg.isEmpty()}) {
                    marker.bindPopup("#{marker.popupMsg}");
                }
                
                marker.addTo(#{layer_unique_name});
            </ui:repeat>
            
            //Polylines
            <ui:repeat value="#{layer.polylines}" var="polyline">
                var poly = L.polyline([],{color: '#{polyline.style.color}', weight: #{polyline.style.weight}, fill: #{polyline.style.fill}, fillColor: '#{polyline.style.fillColor}', fillOpacity: #{polyline.style.fillOpacity}});
        
                <ui:repeat value="#{polyline.points}" var="point">
                    poly.addLatLng(L.latLng(#{point.latitude},#{point.longitude}));
                </ui:repeat>
                
                if(#{!polyline.popupMsg.isEmpty()}) {
                    poly.bindPopup("#{polyline.popupMsg}");
                }
        
                poly.addTo(#{layer_unique_name});
            </ui:repeat>
            
            //Circles
            <ui:repeat value="#{layer.circles}" var="circle">
                var circle = L.circle([#{circle.position.latitude},#{circle.position.longitude}], #{circle.radius},{color: '#{circle.style.color}', weight: #{circle.style.weight}, fill: #{circle.style.fill}, fillColor: '#{circle.style.fillColor}', fillOpacity: #{circle.style.fillOpacity}});
                
                if(#{!circle.popupMsg.isEmpty()}) {
                    circle.bindPopup("#{circle.popupMsg}");
                }
                
                circle.addTo(#{layer_unique_name});
            </ui:repeat>
            
            if(#{layer.visible}) {
                #{cc.attrs.id}.addLayer(#{layer_unique_name});
            }
            #{cc.attrs.id}_layers.push(#{layer_unique_name});
            #{cc.attrs.id}_layers_map['#{layer_unique_name}'] = #{layer_unique_name};
        </ui:repeat>
        
        if(#{cc.mapObject.draw != null}) {
        		if (#{cc.mapObject.draw.layer != null}) {
		        var DrawCustomMarker = L.Icon.extend({
		            options: {
		                shadowUrl: null,
		                iconUrl: '#{resource['images:marker-icon.png']}'
		            }
		        });
		
		        var drawControl = new L.Control.Draw({
		            position: '#{cc.mapObject.draw.position.value}',
		            draw: {
		                marker: {
		                    icon: new DrawCustomMarker()
		                }
		            },
		            edit: {
		                featureGroup: #{cc.attrs.id}_layers[#{cc.mapObject.layers.indexOf(cc.mapObject.draw.layer)}]
		            }
		        });
		        
		        #{cc.attrs.id}.addControl(drawControl);
		
		        #{cc.attrs.id}.on(L.Draw.Event.CREATED, function (e) {
		            var type = e.layerType,
		                layer = e.layer;
		            #{cc.attrs.id}_layers[#{cc.mapObject.layers.indexOf(cc.mapObject.draw.layer)}].addLayer(layer);
		        });
        		}
        }

        if(#{cc.mapObject.layerControl}) {
            layers.addTo(#{cc.attrs.id});
        }
    </script>
    
</composite:implementation>

</html>
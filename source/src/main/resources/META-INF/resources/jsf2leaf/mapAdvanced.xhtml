<!--
A JSF2 Leaflet wrapper component for OpenStreetMap
Copyright (C) 2015 Leonardo Ciocari

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details. 
-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:composite="http://java.sun.com/jsf/composite">

<composite:interface componentType="mapAdvanced">
    <composite:attribute name="map" type="java.lang.Object" />
</composite:interface>

<composite:implementation>

    <h:head>
    		<link rel="stylesheet" href="#{resource['css:leaflet.css']}" />
        <script src="#{resource['js:leaflet.js']}"></script>
        
        <link rel="stylesheet" href="#{resource['css:markercluster.css']}" />
        <script src="#{resource['js:markercluster.js']}"></script>
                
        <link rel="stylesheet" href="#{resource['css:Control.MiniMap.min.css']}" />
        <script src="#{resource['js:Control.MiniMap.min.js']}"></script>
                
        <link rel="stylesheet" href="#{resource['css:L.Icon.Pulse.css']}" />
        <script src="#{resource['js:L.Icon.Pulse.js']}"></script>
        
        <link rel="stylesheet" href="#{resource['css:leaflet.draw-0.4.2.css']}" />
        <script src="#{resource['js:leaflet.draw-0.4.2.js']}"></script>
        
        <link rel="stylesheet" href="#{resource['css:legend.css']}" />
    </h:head>
    
    <style type="text/css">
        .leaflet-control-layers-toggle {
            background-image: url('#{resource['images:layers.png']}') !important;
        }
        .leaflet-draw-toolbar a{
        		background-image:url('#{resource['images:spritesheet.png']}') !important;
        		background-image:linear-gradient(transparent,transparent),url('#{resource['images:spritesheet.svg']}') !important
        	}
        .leaflet-retina .leaflet-draw-toolbar a{
        		background-image:url('#{resource['images:spritesheet-2x.png']}') !important;
        		background-image:linear-gradient(transparent,transparent),url('#{resource['images:spritesheet.svg']}') !important
        	}
    </style>

    <div id="#{cc.attrs.id}" style="width:#{cc.mapObject.width}; height:#{cc.mapObject.height}"/>
	
	<h:form>
    		<h:inputText id="zoom" value="#{cc.mapObject.zoom}" style="display:none"> 
	    		<f:ajax />
    		</h:inputText>
    		<h:inputText id="latitude" value="#{cc.mapObject.center.latitude}" style="display:none"> 
	    		<f:ajax />
    		</h:inputText>
    		<h:inputText id="longitude" value="#{cc.mapObject.center.longitude}" style="display:none"> 
	    		<f:ajax />
    		</h:inputText>
    		<h:inputText id="drawCreate" value="#{cc.mapObject.draw.geoJsonObject}" style="display:none"> 
	    		<f:ajax listener="#{cc.mapObject.draw.create}" onevent="drawCreateCallback" render="drawCreate"/>
    		</h:inputText>
    		<h:inputText id="drawEdit" value="#{cc.mapObject.draw.geoJsonObject}" style="display:none"> 
	    		<f:ajax listener="#{cc.mapObject.draw.edit}" onevent="drawEditCallback" render="drawEdit"/>
    		</h:inputText>
    		<h:inputText id="drawDelete" value="#{cc.mapObject.draw.geoJsonObject}" style="display:none"> 
	    		<f:ajax listener="#{cc.mapObject.draw.delete}" onevent="drawDeleteCallback" render="drawDelete"/>
    		</h:inputText>
	</h:form>       
    
    <script type="text/javascript">
    
        var #{cc.attrs.id} = L.map('#{cc.attrs.id}', {center: [#{cc.mapObject.center.latitude},#{cc.mapObject.center.longitude}], dragging: #{cc.mapObject.draggingEnabled}, zoomControl: #{cc.mapObject.zoomControl} , zoom: #{cc.mapObject.zoom}});
        var #{cc.attrs.id}_layers = [];
        var #{cc.attrs.id}_layers_map = new Object();

        L.tileLayer('#{cc.mapObject.urlTemplate}', {id: '#{cc.mapObject.id}', attribution: '#{cc.mapObject.attribution}', maxZoom: #{cc.mapObject.maxZoom}, minZoom: #{cc.mapObject.minZoom}}).addTo(#{cc.attrs.id});

        var layers = L.control.layers(null, null, {position: '#{cc.mapObject.layerControlPosition.value}'});

        if(!#{cc.mapObject.zoomEnabled}) {
            #{cc.attrs.id}.touchZoom.disable();
            #{cc.attrs.id}.doubleClickZoom.disable();
            #{cc.attrs.id}.scrollWheelZoom.disable();
            #{cc.attrs.id}.boxZoom.disable();
            #{cc.attrs.id}.keyboard.disable();
        } else {
            #{cc.attrs.id}.on('zoomend', function(e) {
	            	document.querySelector('[id$=":zoom"]').value = e.target._zoom;
	            	document.querySelector('[id$=":zoom"]').onchange();
            });
        }
        
        #{cc.attrs.id}.on('moveend', function(e) {
	        	document.querySelector('[id$=":latitude"]').value = #{cc.attrs.id}.getCenter().lat;
            	document.querySelector('[id$=":latitude"]').onchange();
            	document.querySelector('[id$=":longitude"]').value = #{cc.attrs.id}.getCenter().lng;
            	document.querySelector('[id$=":longitude"]').onchange();
	    });

        if(#{cc.mapObject.miniMapEnabled}) {
            new L.Control.MiniMap(L.tileLayer('#{cc.mapObject.urlTemplate}', {}), {
                toggleDisplay: '#{cc.mapObject.miniMap.toggleDisplay}',
                zoomAnimation: '#{cc.mapObject.miniMap.zoomAnimation}',
                position: '#{cc.mapObject.miniMap.position.value}',
                width: '#{cc.mapObject.miniMap.width}',
                height: '#{cc.mapObject.miniMap.height}'
            }).addTo(#{cc.attrs.id});
        }
        
        if(#{cc.mapObject.legend != null}) {
			var legend = new L.Control({position: '#{cc.mapObject.legend.position.value}'});

			legend.onAdd = function (map) {

			    var div = L.DomUtil.create('div', 'info legend');

			    <ui:repeat value="#{cc.mapObject.legend.grades}" var="grade">
				    div.innerHTML += '<i style="background:' + '#{grade.color}' + '"></i>' + '#{!grade.label.isEmpty() ? grade.label : grade.value}' + '<br/>';
			    </ui:repeat>

			    return div;
			};

			legend.addTo(#{cc.attrs.id});
		}
        
        var editableLayerObjects = {};
        
        //Layers
        <ui:repeat value="#{cc.mapObject.layers}" var="layer">

            <ui:param name="layer_unique_name" value="#{layer.hasId() ? layer.id : 'layer'}" />
            
            var #{layer_unique_name} = #{layer.clusterEnabled}?new L.MarkerClusterGroup({ disableClusteringAtZoom: #{layer.clusterDisableAtZoom}, maxClusterRadius: #{layer.clusterMaxRadius}}):new L.FeatureGroup();
        
            if(#{cc.mapObject.layerControl}) {
                layers.addOverlay(#{layer_unique_name}, "#{layer.label}");
            }
            
            //Markers
            <ui:repeat value="#{layer.markers}" var="marker" varStatus="status">
                <ui:param name="path" value="images:markers/#{marker.fileName}" />

                if(!#{marker.pulse.pulsing}) {
                    var icon = new L.Icon({iconSize: [25, 41], iconAnchor: [12, 41], popupAnchor: [0, -45], iconUrl: '#{resource[path]}', shadowUrl: '#{resource['images:marker-shadow.png']}'});
                } else {
                    var icon = L.icon.pulse({iconSize:[#{marker.pulse.size},#{marker.pulse.size}],color:'#{marker.pulse.color}'});
                }
                var marker = L.marker([#{marker.position.latitude}, #{marker.position.longitude}],{icon: icon});
                                        
                if(#{!marker.popupMsg.isEmpty()}) {
                    marker.bindPopup("#{marker.popupMsg}");
                }
                
                marker.addTo(#{layer_unique_name});
                
                if (#{layer.equals(cc.mapObject.draw.layer)}) {
                		editableLayerObjects[marker._leaflet_id] = {indexOfArray: #{status.index}, layerType: "marker",  leafletId: marker._leaflet_id};
                }
            </ui:repeat>
            
            //Polylines
            <ui:repeat value="#{layer.polylines}" var="polyline" varStatus="status">
                var poly = L.polyline([],{color: '#{polyline.style.color}', weight: #{polyline.style.weight}, fill: #{polyline.style.fill}, fillColor: '#{polyline.style.fillColor}', fillOpacity: #{polyline.style.fillOpacity}});
        
                <ui:repeat value="#{polyline.points}" var="point">
                    poly.addLatLng(L.latLng(#{point.latitude},#{point.longitude}));
                </ui:repeat>
                
                if(#{!polyline.popupMsg.isEmpty()}) {
                    poly.bindPopup("#{polyline.popupMsg}");
                }
        
                poly.addTo(#{layer_unique_name});
                
                if (#{layer.equals(cc.mapObject.draw.layer)}) {
                		editableLayerObjects[poly._leaflet_id] = {indexOfArray: #{status.index}, layerType: "polyline", leafletId: poly._leaflet_id};
	            }
            </ui:repeat>
            
            //Circles
            <ui:repeat value="#{layer.circles}" var="circle" varStatus="status">
                var circle = L.circle([#{circle.position.latitude},#{circle.position.longitude}], #{circle.radius},{color: '#{circle.style.color}', weight: #{circle.style.weight}, fill: #{circle.style.fill}, fillColor: '#{circle.style.fillColor}', fillOpacity: #{circle.style.fillOpacity}});
                
                if(#{!circle.popupMsg.isEmpty()}) {
                    circle.bindPopup("#{circle.popupMsg}");
                }
                
                circle.addTo(#{layer_unique_name});
                
                if (#{layer.equals(cc.mapObject.draw.layer)}) {
                		editableLayerObjects[circle._leaflet_id] = {indexOfArray: #{status.index}, layerType: "circle", leafletId: circle._leaflet_id};
	            }
            </ui:repeat>
            
          	//Features
            <ui:repeat value="#{layer.features}" var="feature" varStatus="status">
	            var geoJson = #{feature.toGeoJSON()};
	            // Leaflet Draw not support geometies with Multi type
	            if (geoJson.geometry.type.indexOf("Multi") !== -1) {
	            		geoJson.geometry.type = geoJson.geometry.type.replace("Multi", "");
	            		geoJson.geometry.coordinates = geoJson.geometry.coordinates[0]; 
	            }
            		var geoJsonLayer = L.geoJson(geoJson,{
		    	    		style: {
		    	    	    		color: "#{feature.style.color}",
		    	    	    		weight: "#{feature.style.weight}",
		    	    	    		opacity: "#{feature.style.opacity}",
		    	    	    		fill: "#{feature.style.fill}",
		    	    	    		fillColor: "#{feature.style.fillColor}",
		    	    	    		fillOpacity: "#{feature.style.fillOpacity}" 
		    	    		},
	            		onEachFeature: function(feature, layer) {
	            			layer.bindPopup("#{feature.popupMsg}");
	            		},
	            		pointToLayer: function(feature, latlng) {
	            			var icon = new L.Icon({iconSize: [25, 41], iconAnchor: [12, 41], popupAnchor: [0, -45], iconUrl: '#{resource['images:marker-icon.png']}', shadowUrl: '#{resource['images:marker-shadow.png']}'});
	            			return L.marker(latlng, {icon: icon});
	            		}
		    	    	});
	            geoJsonLayer.eachLayer(function(feature){
	            		feature.addTo(#{layer_unique_name});
	            		if (#{layer.equals(cc.mapObject.draw.layer)}) {
			    	    		editableLayerObjects[feature._leaflet_id] = {indexOfArray: #{status.index}, layerType: "feature", leafletId: feature._leaflet_id};
	                }
				});
            </ui:repeat>
            
            if(#{layer.visible}) {
                #{cc.attrs.id}.addLayer(#{layer_unique_name});
            }
            #{cc.attrs.id}_layers.push(#{layer_unique_name});
            #{cc.attrs.id}_layers_map['#{layer_unique_name}'] = #{layer_unique_name};
        </ui:repeat>
        
        if(#{cc.mapObject.draw != null}) {
        		if (#{cc.mapObject.draw.layer != null}) {
		        var drawStyleOptions = {
					color: '#{cc.mapObject.draw.style.color}',
					weight: '#{cc.mapObject.draw.style.weight}',
					opacity: '#{cc.mapObject.draw.style.opacity}',
					fill: '#{cc.mapObject.draw.style.fill}',
					fillColor: '#{cc.mapObject.draw.style.fillColor}',
					fillOpacity: '#{cc.mapObject.draw.style.fillOpacity}'
				};
		        
		        var drawMarkerIcon = new L.Icon({iconSize: [25, 41], iconAnchor: [12, 41], popupAnchor: [0, -45], iconUrl: '#{resource['images:marker-icon.png']}', shadowUrl: '#{resource['images:marker-shadow.png']}'});
		
		        var drawControl = new L.Control.Draw({
		            position: '#{cc.mapObject.draw.position.value}',
		            draw: {
						polyline: #{cc.mapObject.draw.polylineEnabled ? "{shapeOptions: drawStyleOptions}" : false },
						polygon: #{cc.mapObject.draw.polygonEnabled ? "{shapeOptions: drawStyleOptions}" : false },
						rectangle: #{cc.mapObject.draw.rectangleEnabled ? "{shapeOptions: drawStyleOptions}" : false },
						circle: #{cc.mapObject.draw.circleEnabled ? "{shapeOptions: drawStyleOptions}" : false },
						marker: #{cc.mapObject.draw.markerEnabled ? "{icon: drawMarkerIcon}" : false },
		            },
		            edit: {
		                featureGroup: #{cc.attrs.id}_layers[#{cc.mapObject.layers.indexOf(cc.mapObject.draw.layer)}],
		                edit: #{cc.mapObject.draw.editEnabled ? "{}" : false },
		                remove: #{cc.mapObject.draw.removeEnabled ? "{}" : false },
		            }
		        });
		        
		        #{cc.attrs.id}.addControl(drawControl);
		        
		        var layerToGeoJson = function(layer) {
		        		var geoJson = layer.toGeoJSON();
		        		var properties = editableLayerObjects[layer._leaflet_id];
		        		
		        		if (properties.layerType == 'circle') {
		        			geoJson.geometry["radius"] = layer._mRadius;
		        		}
		        		
		        		geoJson.properties = Object.assign({}, geoJson.properties, properties);
		        		
		        		return JSON.stringify(geoJson);
		        }
		
		        #{cc.attrs.id}.on("draw:created", function (e) {
		            #{cc.attrs.id}_layers[#{cc.mapObject.layers.indexOf(cc.mapObject.draw.layer)}].addLayer(e.layer);
		            editableLayerObjects[e.layer._leaflet_id] = {indexOfArray: -1, layerType: e.layerType, leafletId: e.layer._leaflet_id};
		            
		            document.querySelector('[id$=":drawCreate"]').value = layerToGeoJson(e.layer);
	            		document.querySelector('[id$=":drawCreate"]').onchange();
		        });
		        #{cc.attrs.id}.on("draw:edited", function (e) {
		            e.layers.eachLayer(function(layer) {
		            		document.querySelector('[id$=":drawEdit"]').value = layerToGeoJson(layer);
	            			document.querySelector('[id$=":drawEdit"]').onchange();
		            });
		            
		        });
		        #{cc.attrs.id}.on("draw:deleted", function (e) {
		            e.layers.eachLayer(function(layer) {
		            		document.querySelector('[id$=":drawDelete"]').value = layerToGeoJson(layer);
	            			document.querySelector('[id$=":drawDelete"]').onchange();
		            });
		        });
        		}
        }

        if(#{cc.mapObject.layerControl}) {
            layers.addTo(#{cc.attrs.id});
        }
        
        var drawCreateCallback = function(response) {
	    		if (response.status == "success") { 
	    			var feature = JSON.parse(document.querySelector('[id$="drawCreate"]').value);
	    			editableLayerObjects[feature.properties.leafletId].indexOfArray = feature.properties.indexOfArray;
	    		}
	    	}
        
        var drawEditCallback = function(response) {
	    		if (response.status == "success") {
	    			var feature = JSON.parse(document.querySelector('[id$="drawEdit"]').value);
	    		}
	    	}
        
        var drawDeleteCallback = function(response) {
	    		if (response.status == "success") {
	    			var feature = JSON.parse(document.querySelector('[id$="drawDelete"]').value);
	    			delete editableLayerObjects[feature.properties.leafletId];
	    		}
	    	}
    </script>
    
</composite:implementation>

</html>